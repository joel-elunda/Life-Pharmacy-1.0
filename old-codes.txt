package life.pharmacy.views;

import javafx.beans.property.*;
import javafx.collections.*;
import javafx.geometry.*;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import javafx.util.StringConverter;
import javafx.util.converter.IntegerStringConverter;
import life.pharmacy.models.Client;
import life.pharmacy.models.DetailFacture;
import life.pharmacy.models.Facture;
import life.pharmacy.models.Produit;
import life.pharmacy.services.ClientService;
import life.pharmacy.services.FactureService;
import life.pharmacy.services.ProduitService;
import life.pharmacy.utils.Session;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * Version finale de la vue de facturation :
 * - authentification déjà assurée par Main/LoginView
 * - boutons de gestion (ouvrent les vues respectives si disponibles)
 * - sélection produit via ComboBox éditable (autocomplétion)
 * - Valider/Enregistrer + Aperçu/Imprimer fonctionnels
 * - capture scanner via champ caché
 */
public class FacturationView {

    private final ObservableList<Ligne> lignes = FXCollections.observableArrayList();

    private final Label lblTotalHT = new Label("0.00");
    private final Label lblTVA = new Label("0.00");
    private final Label lblTotalTTC = new Label("0.00");

    private double tvaPercent = 0.16;

    // UI fields
    private ComboBox<Client> cbClient;
    private ComboBox<Produit> cbProduit;          // selection produit comme combo (editable)
    private TextField tfProduitEditor;            // editor du combo pour autocomplétion
    private TableView<Ligne> tablePanier;
    private ComboBox<String> cbModePaiement;

    // place ceci avec les autres champs privés de la classe FacturationView
    private boolean suppressEditorListener = false;


    // Hidden field to capture scanner input
    private TextField tfScannerHidden;

    // cache produits
    private ObservableList<Produit> allProducts = FXCollections.observableArrayList();

    public FacturationView() {}


    public void show(Stage stage) {
        BorderPane root = new BorderPane();
        root.setPadding(new Insets(12));

        // header
        HBox header = buildHeader(stage);
        root.setTop(header);

        // left: client + produit selection
        VBox left = new VBox(12, buildClientSection(), buildProduitSection());
        left.setPrefWidth(520);
        left.setPadding(new Insets(6));

        // right: panier + résumé + actions
        VBox right = new VBox(12, buildPanierSection(), buildResumeSection(), buildActionsSection());
        right.setPrefWidth(520);
        right.setPadding(new Insets(6));

        HBox center = new HBox(12, left, right);
        center.setPadding(new Insets(8));
        root.setCenter(center);

        // Hidden scanner textfield
        tfScannerHidden = new TextField();
        tfScannerHidden.setOpacity(0);
        tfScannerHidden.setPrefHeight(1);
        tfScannerHidden.setOnAction(ev -> {
            String code = tfScannerHidden.getText().trim();
            if (!code.isEmpty()) {
                Produit p = lookupProduitByCodeOrName(code);
                if (p != null) {
                    ajouterProduit(p, 1);
                } else {
                    // minimal feedback
                    new Alert(Alert.AlertType.WARNING, "Produit non trouvé pour : " + code).showAndWait();
                }
            }
            tfScannerHidden.clear();
            tfScannerHidden.requestFocus();
        });

        // Put hidden field somewhere not visible but focusable
        VBox bottomBox = new VBox(tfScannerHidden);
        bottomBox.setPadding(new Insets(0));
        root.setBottom(bottomBox);

        Scene scene = new Scene(root, 1150, 720);
        try { scene.getStylesheets().add(getClass().getResource("/css/facturation.css").toExternalForm()); } catch (Exception ignored) {}

        stage.setTitle("Life Pharmacy — Caisse");
        stage.setScene(scene);
        stage.show();

        // load data
        refreshClients();
        refreshProduits();

        // ensure scanner has focus for barcode scanner
        tfScannerHidden.requestFocus();
    }

    // ---------------- UI builders ----------------

    private HBox buildHeader(Stage parent) {
        ImageView logo;
        try {
            logo = new ImageView(new Image(getClass().getResourceAsStream("/images/logo.png")));
            logo.setFitHeight(44);
            logo.setPreserveRatio(true);
        } catch (Exception ex) {
            logo = new ImageView();
        }

        Label title = new Label("Life Pharmacy — Caisse");
        title.setStyle("-fx-font-size:18px; -fx-font-weight:bold;");

        // Management buttons (visible according to roles)
        Button btnClients = new Button("Clients");
        btnClients.setOnAction(e -> openViewSafely("Clients", () -> new ParentWrapper(new ClientView().getView())));

        Button btnProduits = new Button("Produits");
        btnProduits.setOnAction(e -> openViewSafely("Produits", () -> new ParentWrapper(new ProduitView().getView())));

        Button btnFournisseurs = new Button("Fournisseurs");
        btnFournisseurs.setOnAction(e -> openViewSafely("Fournisseurs", () -> new ParentWrapper(new FournisseurView().getView())));

        Button btnFactures = new Button("Factures");
        btnFactures.setOnAction(e -> openViewSafely("Factures", () -> new ParentWrapper(new FactureView().getView())));








        Button btnUtilisateurs = new Button("Utilisateurs");
        btnUtilisateurs.setOnAction(e -> {
            // Only admins allowed (UI disable if not)
            if (!Session.isAdmin()) {
                new Alert(Alert.AlertType.WARNING, "Accès réservé aux administrateurs.").showAndWait();
                return;
            }
            try {
                Stage s = new Stage();
                s.setScene(new Scene(new UtilisateurView(Session.getCurrentUser()).getView(), 800, 600));
                s.setTitle("Utilisateurs");
                s.show();
            } catch (Exception ex) {
                new Alert(Alert.AlertType.ERROR, "Impossible d'ouvrir Utilisateurs : " + ex.getMessage()).showAndWait();
            }
        });

        Button btnRecettes = new Button("Recettes");
        btnRecettes.setOnAction(e -> openViewSafely("Recettes", () -> new ParentWrapper(new RecetteView().getView())));

        HBox left = new HBox(10, logo, title);
        left.setAlignment(Pos.CENTER_LEFT);

        HBox managers = new HBox(6, btnClients, btnProduits, btnFournisseurs, btnFactures, btnRecettes, btnUtilisateurs);
        managers.setAlignment(Pos.CENTER_LEFT);

        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);

        HBox header = new HBox(12, left, spacer, managers);
        header.setAlignment(Pos.CENTER_LEFT);
        header.setPadding(new Insets(8));
        header.getStyleClass().add("header");

        // Disable some management buttons for non-admins
        if (!Session.isManager()) {
            btnRecettes.setDisable(true);
        }
        if (!Session.isAdmin()) {
            btnUtilisateurs.setDisable(true);
        }

        return header;
    }

    private void openViewSafely(String title, ViewSupplier supplier) {
        try {
            Parent node = supplier.get().getNode();
            if (node == null) {
                new Alert(Alert.AlertType.ERROR, title + " : vue introuvable.").showAndWait();
                return;
            }
            Stage s = new Stage();
            // taille par défaut raisonnable ; tu peux ajuster
            Scene scene = new Scene(node, 850, 600);
            s.setScene(scene);
            s.setTitle(title);
            s.show();
        } catch (Throwable t) {
            new Alert(Alert.AlertType.ERROR, "Erreur ouverture " + title + " : " + t.getMessage()).showAndWait();
            t.printStackTrace();
        }
    }

    // small functional interface wrapper because some views return Parent, others BorderPane etc.
    @FunctionalInterface
    private interface ViewSupplier {
        ParentWrapper get() throws Exception;
    }

    // tiny wrapper so code using different view-returning styles will fit
    private static class ParentWrapper {
        private final javafx.scene.Parent node;
        private final double prefW;
        private final double prefH;
        public ParentWrapper(javafx.scene.Parent n) { this(n, 800, 600); }
        public ParentWrapper(javafx.scene.Parent n, double w, double h) { node = n; prefW = w; prefH = h; }
        public javafx.scene.Parent getNode() { return node; }
        public double getPrefWidth() { return prefW; }
        public double getPrefHeight() { return prefH; }
    }

    private VBox buildClientSection() {
        Label lbl = new Label("Client");
        cbClient = new ComboBox<>();
        cbClient.setPrefWidth(380);
        cbClient.setPromptText("Sélectionner client...");
        refreshClients();

        Button btnAjouterClient = new Button("➕ Nouveau client");
        btnAjouterClient.setOnAction(e -> {
            Dialog<Client> dlg = new Dialog<>();
            dlg.setTitle("Nouveau client");
            dlg.getDialogPane().getButtonTypes().addAll(ButtonType.OK, ButtonType.CANCEL);

            TextField tfNom = new TextField();
            tfNom.setPromptText("Nom");
            TextField tfTel = new TextField();
            tfTel.setPromptText("Téléphone");

            VBox vb = new VBox(8, new Label("Nom :"), tfNom, new Label("Téléphone :"), tfTel);
            vb.setPadding(new Insets(8));
            dlg.getDialogPane().setContent(vb);

            dlg.setResultConverter(bt -> {
                if (bt == ButtonType.OK) {
                    Client c = new Client();
                    c.setNom(tfNom.getText());
                    c.setTelephone(tfTel.getText());
                    ClientService.insert(c);
                    return c;
                }
                return null;
            });

            Optional<Client> res = dlg.showAndWait();
            res.ifPresent(c -> {
                refreshClients();
                cbClient.getSelectionModel().selectLast();
            });
        });

        HBox h = new HBox(8, cbClient, btnAjouterClient);
        h.setAlignment(Pos.CENTER_LEFT);
        VBox box = new VBox(6, lbl, h);
        box.setPadding(new Insets(6));
        box.getStyleClass().add("panel");
        return box;
    }

    private void refreshClients() {
        try {
            List<Client> clients = ClientService.getAll();
            cbClient.setItems(FXCollections.observableArrayList(clients));
            // show client name in combo
            cbClient.setCellFactory(lv -> new ListCell<>() {
                @Override protected void updateItem(Client item, boolean empty) {
                    super.updateItem(item, empty);
                    setText(empty || item == null ? null : item.getNom());
                }
            });
            cbClient.setConverter(new StringConverter<>() {
                @Override public String toString(Client c) { return c == null ? "" : c.getNom(); }
                @Override public Client fromString(String s) { return null; }
            });
        } catch (Exception ex) {
            cbClient.setItems(FXCollections.observableArrayList());
        }
    }

    private VBox buildProduitSection() {
        Label lbl = new Label("Produit (nom / code-barres)");
        // ComboBox editable for autocompletion
        cbProduit = new ComboBox<>();
        cbProduit.setEditable(true);
        cbProduit.setPrefWidth(420);
        refreshProduits();

        // get editor
        tfProduitEditor = cbProduit.getEditor();

        // Filter the combo suggestions when typing
        tfProduitEditor.textProperty().addListener((obs, oldV, newV) -> {
            if (newV == null) return;
            String filter = newV.trim().toLowerCase();
            if (filter.isEmpty()) {
                cbProduit.setItems(allProducts);
                cbProduit.hide();
            } else {
                ObservableList<Produit> filtered = FXCollections.observableArrayList();
                for (Produit p : allProducts) {
                    if ((p.getNom() != null && p.getNom().toLowerCase().contains(filter))
                            || (hasCodeBarre(p) && getCodeBarre(p).toLowerCase().contains(filter))) {
                        filtered.add(p);
                    }
                }
                cbProduit.setItems(filtered);
                cbProduit.show();
            }
        });

        // Add on Enter: either selected item or try lookup by text
        tfProduitEditor.setOnKeyPressed(ev -> {
            if (ev.getCode() == KeyCode.ENTER) {
                Produit selected = cbProduit.getSelectionModel().getSelectedItem();
                if (selected == null) {
                    String txt = tfProduitEditor.getText();
                    selected = lookupProduitByCodeOrName(txt);
                }
                if (selected != null) {
                    ajouterProduit(selected, 1);
                    tfProduitEditor.clear();
                } else {
                    new Alert(Alert.AlertType.WARNING, "Produit introuvable : " + tfProduitEditor.getText()).showAndWait();
                }
                // re-focus scanner to continue scanning if needed
                if (tfScannerHidden != null) tfScannerHidden.requestFocus();
            }
        });

        VBox box = new VBox(6, lbl, cbProduit);
        box.setPadding(new Insets(6));
        box.getStyleClass().add("panel");
        return box;
    }

    private void refreshProduits() {
        try {
            List<Produit> all = ProduitService.getAll();
            allProducts.setAll(all);
            cbProduit.setItems(allProducts);

            cbProduit.setCellFactory(lv -> new ListCell<>() {
                @Override protected void updateItem(Produit item, boolean empty) {
                    super.updateItem(item, empty);
                    setText(empty || item == null ? null : item.getNom());
                }
            });

            cbProduit.setConverter(new StringConverter<>() {
                @Override public String toString(Produit p) { return p == null ? "" : p.getNom(); }
                @Override public Produit fromString(String s) { return null; }
            });
        } catch (Exception ex) {
            allProducts.clear();
            cbProduit.setItems(allProducts);
        }
    }

    private boolean hasCodeBarre(Produit p) {
        try { return getCodeBarre(p) != null; } catch (Exception e) { return false; }
    }

    private String getCodeBarre(Produit p) {
        try {
            var m = p.getClass().getMethod("getCodeBarre");
            Object v = m.invoke(p);
            return v == null ? "" : String.valueOf(v);
        } catch (Exception ex) {
            return "";
        }
    }

    private Produit lookupProduitByCodeOrName(String q) {
        if (q == null) return null;
        q = q.trim();
        // exact code match
        for (Produit p : allProducts) {
            String code = getCodeBarre(p);
            if (!code.isEmpty() && code.equals(q)) return p;
        }
        // exact name
        for (Produit p : allProducts) {
            if (p.getNom() != null && p.getNom().equalsIgnoreCase(q)) return p;
        }
        // contains
        for (Produit p : allProducts) {
            if (p.getNom() != null && p.getNom().toLowerCase().contains(q.toLowerCase())) return p;
        }
        return null;
    }

    private VBox buildPanierSection() {
        Label lbl = new Label("Panier");

        tablePanier = new TableView<>(lignes);
        tablePanier.setEditable(true);
        tablePanier.setPrefHeight(360);

        TableColumn<Ligne, String> colProduit = new TableColumn<>("Produit");
        colProduit.setCellValueFactory(c -> new SimpleStringProperty(c.getValue().getProduitNom()));
        colProduit.setPrefWidth(260);

        TableColumn<Ligne, Integer> colQte = new TableColumn<>("Qté");
        colQte.setCellValueFactory(c -> c.getValue().quantiteProperty().asObject());
        colQte.setCellFactory(TextFieldTableCell.forTableColumn(new IntegerStringConverter()));
        colQte.setOnEditCommit(ev -> {
            int newQ = ev.getNewValue() == null || ev.getNewValue() < 1 ? 1 : ev.getNewValue();
            ev.getRowValue().setQuantite(newQ);
            calculerTotaux();
            if (tfScannerHidden != null) tfScannerHidden.requestFocus();
        });
        colQte.setPrefWidth(80);

        TableColumn<Ligne, Double> colPU = new TableColumn<>("PU");
        colPU.setCellValueFactory(c -> c.getValue().prixProperty().asObject());
        colPU.setPrefWidth(120);

        TableColumn<Ligne, Double> colTotal = new TableColumn<>("Total");
        colTotal.setCellValueFactory(c -> new SimpleDoubleProperty(c.getValue().getLineTotal()).asObject());
        colTotal.setPrefWidth(120);

        TableColumn<Ligne, Void> colAction = new TableColumn<>("Action");
        colAction.setCellFactory(tc -> new TableCell<>() {
            private final Button btn = new Button("Suppr");
            { btn.setOnAction(e -> { Ligne l = getTableView().getItems().get(getIndex()); lignes.remove(l); calculerTotaux(); if (tfScannerHidden!=null) tfScannerHidden.requestFocus(); });
                btn.setStyle("-fx-background-color: #e74c3c; -fx-text-fill: white;"); }
            @Override protected void updateItem(Void item, boolean empty) { super.updateItem(item, empty); setGraphic(empty ? null : btn); }
        });
        colAction.setPrefWidth(80);

        tablePanier.getColumns().setAll(colProduit, colQte, colPU, colTotal, colAction);

        VBox box = new VBox(8, lbl, tablePanier);
        box.setPadding(new Insets(6));
        box.getStyleClass().add("panel");
        return box;
    }

    private VBox buildResumeSection() {
        Label lbl = new Label("Résumé");

        GridPane grid = new GridPane();
        grid.setHgap(10);
        grid.setVgap(8);

        grid.add(new Label("Total HT :"), 0, 0);
        grid.add(lblTotalHT, 1, 0);

        grid.add(new Label("TVA (" + (int)(tvaPercent*100) + "%) :"), 0, 1);
        grid.add(lblTVA, 1, 1);

        grid.add(new Label("Total TTC :"), 0, 2);
        grid.add(lblTotalTTC, 1, 2);

        cbModePaiement = new ComboBox<>();
        cbModePaiement.getItems().addAll("Espèces", "Carte Bancaire", "Mobile Money");
        cbModePaiement.setValue("Espèces");

        grid.add(new Label("Mode paiement :"), 0, 3);
        grid.add(cbModePaiement, 1, 3);

        VBox box = new VBox(8, lbl, grid);
        box.setPadding(new Insets(6));
        box.getStyleClass().add("panel");
        return box;
    }

    private HBox buildActionsSection() {
        Button btnValider = new Button("✅ Valider & Enregistrer");
        btnValider.setStyle("-fx-background-color: #27ae60; -fx-text-fill: white;");
        btnValider.setOnAction(e -> validerEtEnregistrer());

        Button btnImprimer = new Button("🖨️ Aperçu / Imprimer");
        btnImprimer.setOnAction(e -> {
            Facture facture = buildFactureFromUI(false); // non sauvegardée
            if (facture != null) {
                ImpressionFactureView preview = new ImpressionFactureView(facture);
                preview.showAndWait();
            }
        });

        Button btnAnnuler = new Button("❌ Annuler");
        btnAnnuler.setOnAction(e -> {
            Alert a = new Alert(Alert.AlertType.CONFIRMATION, "Annuler la facture en cours ?", ButtonType.YES, ButtonType.NO);
            a.showAndWait().ifPresent(bt -> { if (bt == ButtonType.YES) nouvellesDonnees(); });
        });

        HBox h = new HBox(12, btnValider, btnImprimer, btnAnnuler);
        h.setAlignment(Pos.CENTER_RIGHT);
        h.setPadding(new Insets(8, 0, 0, 0));
        return h;
    }

    // ---------------- Logic ----------------

    private void ajouterProduit(Produit p, int quantite) {
        if (p == null) return;
        double prix = getProduitPrix(p);

        for (Ligne l : lignes) {
            if (l.getProduitId() == p.getId()) {
                l.setQuantite(l.getQuantite() + quantite);
                tablePanier.refresh();
                calculerTotaux();
                return;
            }
        }

        Ligne ligne = new Ligne(p.getId(), p.getNom(), prix, quantite);
        lignes.add(ligne);
        calculerTotaux();
    }

    private double getProduitPrix(Produit p) {
        try { return (double)p.getClass().getMethod("getPrix").invoke(p); }
        catch (Exception e1) {
            try { return (double)p.getClass().getMethod("getPrixUnitaire").invoke(p); }
            catch (Exception e2) {
                try { return (double)p.getClass().getMethod("getPrice").invoke(p); }
                catch (Exception e3) { return 0.0; }
            }
        }
    }

    private void calculerTotaux() {
        double totalHT = lignes.stream().mapToDouble(Ligne::getLineTotal).sum();
        double tva = totalHT * tvaPercent;
        double ttc = totalHT + tva;
        lblTotalHT.setText(String.format("%.2f", totalHT));
        lblTVA.setText(String.format("%.2f", tva));
        lblTotalTTC.setText(String.format("%.2f", ttc));
    }

    private void validerEtEnregistrer() {
        Facture facture = buildFactureFromUI(true);
        if (facture == null) return;

        try {
            // Persist via service (adapte si ton service a un autre nom)
            FactureService.insert(facture);

            new Alert(Alert.AlertType.INFORMATION, "Facture enregistrée avec succès !").showAndWait();

            // Aperçu / impression automatique
            ImpressionFactureView preview = new ImpressionFactureView(facture);
            preview.showAndWait();

            // Reset
            nouvellesDonnees();
            refreshClients();
            refreshProduits();
            if (tfScannerHidden != null) tfScannerHidden.requestFocus();
        } catch (Exception ex) {
            ex.printStackTrace();
            new Alert(Alert.AlertType.ERROR, "Erreur lors de l'enregistrement : " + ex.getMessage()).showAndWait();
        }
    }

    private Facture buildFactureFromUI(boolean save) {
        if (lignes.isEmpty()) {
            new Alert(Alert.AlertType.WARNING, "Ajoutez au moins un produit.").showAndWait();
            return null;
        }

        Facture f = new Facture();
        // set date with best-effort
        try {
            f.setDate(LocalDateTime.now());
        } catch (Exception ignored) {
            try { f.setDate(LocalDate.now().atStartOfDay()); } catch (Exception ignored2) {}
        }

        Client client = cbClient.getValue();
        f.setClient(client);
        f.setMontantHT(Double.parseDouble(lblTotalHT.getText()));
        f.setMontantTVA(Double.parseDouble(lblTVA.getText()));
        f.setMontantTTC(Double.parseDouble(lblTotalTTC.getText()));

        // details
        List<DetailFacture> details = new ArrayList<>();
        for (Ligne l : lignes) {
            DetailFacture d = new DetailFacture();
            d.setId(l.getProduitId());
            d.setQuantite(l.getQuantite());
            d.setPrixUnitaire(l.getPrix());
            d.setProduitNom(l.getProduitNom()); // snapshot du nom
            details.add(d);
        }
        f.setDetails(details);

        // Optionnel : set mode paiement si Facture possède ce champ
        try {
            var m = f.getClass().getMethod("setModePaiement", String.class);
            m.invoke(f, cbModePaiement.getValue());
        } catch (Exception ignored) {}

        return f;
    }

    private void nouvellesDonnees() {
        lignes.clear();
        calculerTotaux();
        if (cbClient != null) cbClient.getSelectionModel().clearSelection();
        if (cbProduit != null) cbProduit.getEditor().clear();
    }

    private void refreshClientsList() {
        try {
            List<Client> clients = ClientService.getAll();
            cbClient.setItems(FXCollections.observableArrayList(clients));
        } catch (Exception ex) {
            cbClient.setItems(FXCollections.observableArrayList());
        }
    }

    private void refreshProduitsList() {
        try {
            List<Produit> all = ProduitService.getAll();
            allProducts.setAll(all);
            if (cbProduit != null) cbProduit.setItems(allProducts);
        } catch (Exception ex) {
            allProducts.clear();
            if (cbProduit != null) cbProduit.setItems(allProducts);
        }
    }

    // ---------------- DTO interne ----------------
    public static class Ligne {
        private final IntegerProperty produitId = new SimpleIntegerProperty();
        private final StringProperty produitNom = new SimpleStringProperty();
        private final DoubleProperty prix = new SimpleDoubleProperty();
        private final IntegerProperty quantite = new SimpleIntegerProperty();

        public Ligne(int produitId, String produitNom, double prix, int quantite) {
            this.produitId.set(produitId);
            this.produitNom.set(produitNom);
            this.prix.set(prix);
            this.quantite.set(quantite);
        }

        public int getProduitId() { return produitId.get(); }
        public IntegerProperty produitIdProperty() { return produitId; }

        public String getProduitNom() { return produitNom.get(); }
        public StringProperty produitNomProperty() { return produitNom; }

        public double getPrix() { return prix.get(); }
        public DoubleProperty prixProperty() { return prix; }

        public int getQuantite() { return quantite.get(); }
        public IntegerProperty quantiteProperty() { return quantite; }
        public void setQuantite(int q) { this.quantite.set(q); }

        public double getLineTotal() { return getPrix() * getQuantite(); }
    }
}
